# -*- coding: utf-8 -*-
#############################################################
#  context
#############################################################
import base64, codecs
elfary='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'
valderrama='JpcHQuZW1idWFyeS5pbmZvLGNhbGw9dHYsdG1kYl9pZD0lcyxzZWFzb249JXMpJyAlICgKIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gLCBzZWxmIC4gaXRlbSBbICdzZWFzb24nIF0KICkKICkKICkKICAgaWYgc2VsZiAuIGl0ZW0gLiBnZXQgKCAncGxheUNvdW50JyApIDoKICAgIGlmIDIgLSAyOiBJSWlJSWlJaTExSTEgKyBpSTFpSUkxSTFJMWkgLSBJMUlpMUkxICsgb29PT08gLiBJSWlJSWlJaTExSTEKICAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwMDgxICkgLCAnbWFya0FzVW53YXRjaGVkJyApICkKICAgZWxzZSA6CiAgICBpZiAxNSAtIDE1OiBvb28wMDAKICAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwMDgyICkgLCAnbWFya0FzV2F0Y2hlZCcgKSApCiAgICBpZiA2MyAtIDYzOiBvMDBvME9PMDBPCiAgICBpZiA4MSAtIDgxOiBPb29Pb28gLiBvMDBvME9PMDBPIC8gaTFpMWkxMTExSSArIE9vIC8gT29vME9vbyAlIE9PTzAwMDAwTwogIGVsaWYgc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXSA9PSAnZXBpc29kZXMnIDoKICAgaWYgNzcgLSA3NzogaUlpaWkxaSAvIGlJMWlJSTFJMUkxaSAtIG9PbzBPMDAgLSBPb28wT29vICUgb09vME8wMAogICBJMTFpSWkxaSAuIGFwcGVuZCAoICggbG9jYWxpemUgKCAzMDE1MCApICwgJ3NldF92aWV3JyApICkKICAgaWYgNzMgLSA3MzogT09PMDAwMDBPIC4gT28gKiBJMUkgLyBpMWkxaTExMTFJICsgSTFJaTFJMQogICBpZiAzMSAtIDMxOiBpMWkxaTExMTFJICUgSTFJaTFJMQogICBJMTFpSWkxaSAuIGFwcGVuZCAoCiAoCiAnRW1idWFyeSBJbmZvJyAsCiAnUnVuU2NyaXB0KHNjcmlwdC5lbWJ1YXJ5LmluZm8sY2FsbD10dix0bWRiX2lkPSVzLHNlYXNvbj0lcywgZXBpc29kZT0lcyknICUgKAogc2VsZiAuIGl0ZW0gWyAndG1kYicgXSAsIHNlbGYgLiBpdGVtIFsgJ3NlYXNvbicgXSAsIHNlbGYgLiBpdGVtIFsgJ2VwaXNvZGUnIF0KICkKICkKICkKICAgaWYgMSAtIDE6IE9PTzAwMDAwTyAtIG9PbzBPMDAgLSBpMSAuIG9PbzBPMDAKICBlbHNlIDoKICAgaWYgOTEgLSA5MTogaUkxaUlJMUkxSTFpICogaTEgLiBvb09PTwogICBJMTFpSWkxaSAuIGFwcGVuZCAoICggbG9jYWxpemUgKCAzMDE1MSApICwgJ3NldF92aWV3JyApICkKICAgaWYgODEgLSA4MTogSTFJICogT28gLSBpMSAlIE9vb09vbyAqIG9vT09PCiAgcmV0dXJuIEkxMWlJaTFpCiAgaWYgMTkgLSAxOTogSWkKICBpZiAyMiAtIDIyOiBvMDBvME9PMDBPICUgaUkxaUlJMUkxSTFpICsgT28KIGRlZiBzaG93ICggc2VsZiAsIG1lbnUgPSBOb25lICkgOgogIGlmIG1lbnUgOgogICBzZWxmIC4gbGFiZWxBY3Rpb25saXN0ID0gbWVudQogIGVsc2UgOgogICBzZWxmIC4gbGFiZWxBY3Rpb25saXN0ID0gc2VsZiAuIF9nZW5lcmF0ZV9tZW51ICggKQogICBpZiA2MCAtIDYwOiBvb28wMDAgKyBpSWlpaTFpICsgSUlpSUlpSWkxMUkxICUgaTFpMWkxMTExSSAtIElpICUgT29vME9vbwogIGlmIGxlbiAoIHNlbGYgLiBsYWJlbEFjdGlvbmxpc3QgKSA+IDAgOgogICBzZWxmIC4gbGFiZWxBY3Rpb25saXN0IC4gc29ydCAoIGtleSA9IGxhbWJkYSBPb2lJMWlpSTExSUlpMSA6IE9vaUkxaWlJMTFJSWkxIFsgMCBdICkKICAgc2VsZiAuIGxhYmVsQWN0aW9ubGlzdCAuIGluc2VydCAoIDAgLCAoICdbQ09MT1IgZ29sZF1QYWxhbnRpciAzWy9DT0xPUl0nICwgTm9uZSApICkKICAgT09PID0gbGlzdCAoIG1hcCAoIGxhbWJkYSBPb2lJMWlpSTExSUlpMSA6IE9vaUkxaWlJMTFJSWkxIFsgMCBdICwgc2VsZiAuIGxhYmVsQWN0aW9ubGlzdCApICkKICAgTzBvb09PMCA9IDAKICAgd2hpbGUgTzBvb09PMCA9PSAwIDoKICAgIE8wb29PTzAgPSB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIGNvbnRleHRtZW51ICggT09PICkKICAgIGlmIDY0IC0gNjQ6IG9vbzAwMCAqIElpICUgaUkxaUlJMUkxSTFpCiAgIGlmIE8wb29PTzAgPiAwIDoKICAgIHNlbGYgLiBfZXhlYyAoIHNlbGYgLiBsYWJlbEFjdGlvbmxpc3QgWyBPMG9vT08wIF0gKQogICAgaWYgMTIgLSAxMjogaTFpaUlJSTExMSArIG9vbzAwMCAuIGlJaWlpMWkKICAgIGlmIDEgLSAxOiBpSTFpSUkxSTFJMWkgJSBJaSAtIGlJaWlpMWkgLyBPT08wMDAwME8gKyBpSTFpSUkxSTFJMWkgLSBJaQogZGVmIF9leGVjICggc2VsZiAsIGxhYmVsQWN0aW9uICkgOgogIElpSUkxSWlpMTEgLCBpMWkxSWkgPSBsYWJlbEFjdGlvbgogIGlpMWlJMUkxMSA9IE5vbmUKICBPT29PMG9PbzAgPSA1MDAwCiAgaUlJMUlpID0gb3MgLiBwYXRoIC4gam9pbiAoIHhibWN2ZnMgLiB0cmFuc2xhdGVQYXRoICggQURET04gLiBnZXRBZGRvbkluZm8gKCAnUGF0aCcgKSApICwgJ2ljb24ucG5nJyApCiAgaWYgMzcgLSAzNzogbzAwbzBPTzAwTyArIElJaUlJaUlpMTFJMSAlIGlJMWlJSTFJMUkxaSAvIElJaUlJaUlpMTFJMSAlIGkxaWlJSUkxMTEgKyBvb28wTzBvTzAwCiAgaWYgaTFpMUlpID09ICdzZXRfdmlldycgOgogICBpZiA5OCAtIDk4OiBpSTFpSUkxSTFJMWkgLSBJMUkgKyBpMSAqIG9vbzAwMCAlIGkxCiAgIFdhdGNoZWQgKCApIC4gc2V0VmlldyAoIHNlbGYgLiBpdGVtIFsgJ2NvbnRlbnQnIF0gKQogICB4Ym1jZ3VpIC4gRGlhbG9nICggKSAuIG5vdGlmaWNhdGlvbiAoIEFERE9OIC4gZ2V0QWRkb25JbmZvICggJ25hbWUnICkgLCBJaUlJMUlpaTExICkKICAgaWYgMTAwIC0gMTAwOiBpMWlpSUlJMTExIC4gSUlpSUlpSWkxMUkxICogb29vMDAwICogb29vMDAwCiAgZWxpZiBpMWkxSWkgPT0gJ25vdGlmaWNhdGlvbicgOgogICBpZiA4NSAtIDg1OiBJSWlJSWlJaTExSTEgLyBPb29Pb28gLiBvMDBvME9PMDBPICUgT28gKyBPbyAtIGlJaWlpMWkKICAgaWkxaUkxSTExID0gc2VsZiAuIGl0ZW0gWyAnbWVzc2FnZScgXQogICBPT29PMG9PbzAgPSAxMDAwMAogICBpZiA1OSAtIDU5OiBPb29Pb28KICBlbGlmIGkxaTFJaSA9PSAndHJhaWxlcicgOgogICBzZWxmIC4gYnVzY2FyVHJhaWxlciAoIHNlbGYgLiBpdGVtIFsgJ3R5cGUnIF0gLCBzZWxmIC4gaXRlbSBbICd0bWRiJyBdICwgc2VsZiAuIGl0ZW0gWyAndGl0bGUnIF0gKQogICBpZiA1MyAtIDUzOiBpMWkxaTExMTFJIC8gb29PT08gLSBPT08wMDAwME8gKyBvb28wMDAgKiBpMWkxaTExMTFJICogaTFpaUlJSTExMQogIGVsaWYgaTFpMUlpID09ICdtYXJrQXNXYXRjaGVkJyA6CiAgIFdhdGNoZWQgKCApIC4gbWFya0FzV2F0Y2hlZCAoIHNlbGYgLiBpdGVtIFsgJ2NvbnRlbnQnIF0gLCBzZWxmIC4gaXRlbSBbICd0bWRiJyBdICwKIHNlbGYgLiBpdGVtIC4gZ2V0ICggJ3NlYXNvbicgKSAsIHNlbGYgLiBpdGVtIC4gZ2V0ICggJ2VwaXNvZGUnICkgKQogICB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAnQ29udGFpbmVyLlJlZnJlc2gnICkKICAgaWYgODcgLSA4NzogaTFpaUlJSTExMSAtIElJaUlJaUlpMTFJMSAqIElpICUgaTFpMWkxMTExSSAlIGkxCiAgIGlmIDgxIC0gODE6IGkxICsgaTFpMWkxMTExSSAqIE9vIC0gT28gKiBJMUlpMUkxIC0gb09vME8wMAogIGVsaWYgaTFpMUlpID09ICdtYXJrQXNVbndhdGNoZWQnIDoKICAgV2F0Y2hlZCAoICkgLiBtYXJrQXNVbndhdGNoZWQgKCBzZWxmIC4gaXRlbSBbICdjb250ZW50JyBdICwgc2VsZiAuIGl0ZW0gWyAndG1kYicgXSAsCiBzZWxmIC4gaXRlbSAuIGdldCAoICdzZWFzb24nICkgLCBzZWxmIC4gaXRlbSAuIGdldCAoICdlcGlzb2RlJyApICkKICAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggJ0NvbnRhaW5lci5SZWZyZXNoJyApCiAgIGlmIDQgLSA0OiBpMWlpSUlJMTExCiAgZWxpZiBpMWkxSWkgPT0gJ05vU2VndWlyJyA6CiAgIFdhdGNoZWQgKCApIC4gc2V0U2hvd0hpZGUgKCBzZWxmIC4gaXRlbSBbICd0bWRiJyBdICkKICAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggJ0NvbnRhaW5lci5SZWZyZXNoJyApCiAgIGlmIDggLSA4OiBJaUlJaWkxMUlpICsgT29vT29vIC0gaTEKICBlbGlmIGkxaTFJaSA9PSAncmVzZXRSZXN1bWVUaW1lJyA6CiAgIFdhdGNoZWQgKCApIC4gcmVzZXRSZXN1bWVUaW1lICggc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXSAsIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gLAogc2VsZiAuIGl0ZW0gLiBnZXQgKCAnc2Vhc29uJyApICwgc2VsZiAuIGl0ZW0gLiBnZXQgKCAnZXBpc29kZScgKSApCiAgIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICdDb250YWluZXIuUmVmcmVzaCcgKQogICBpZiA2OCAtIDY4OiBJMUlpMUkxICUgSTFJaTFJMSAvIE9PTzAwMDAwTyAuIG9vbzAwMAogIGVsaWYgaTFpMUlpID09ICdzaG93U2Vhc29ucycgOgogICBPbzBvb28wT08wID0gUDNJdGVtICggYWN0aW9uID0gJ2xpc3RhZG9fdGVtcG9yYWRhUycgLAogdG1kYiA9IHNlbGYgLiBpdGVtIC4gZ2V0ICggJ3RtZGInICkgLAogcGxvdCA9IHNlbGYgLiBpdGVtIC4gZ2V0ICggJ3Bsb3QnICkgLAogcG9zdGVyID0gc2VsZiAuIGl0ZW0gLiBnZXQgKCAncG9zdGVyJyApICwKIGZhbmFydCA9IHNlbGYgLiBpdGVtIC4gZ2V0ICggJ2ZhbmFydCcgKSApCiAgIGlmIDgwIC0gODA6IElJaUlJaUlpMTFJMSAvIE9vb09vbyAlIGlJMWlJSTFJMUkxaSAvIG9vT09PICogb29PT08gLSBJaWkxaQogICBPMG9vT08wTzBPME8gPSAnJXM/JXMnICUgKCBzeXMgLiBhcmd2IFsgMCBdICwgT28wb29vME9PMCAuIHRvdXJsICggKSApCiAgIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICdDb250YWluZXIuVXBkYXRlKHBsdWdpbjovLyVzKScgJSBPMG9vT08wTzBPME8gKQogICBpZiA1OSAtIDU5OiBvb28wMDAgLyBPbyAtIGkxCiAgZWxpZiBpMWkxSWkgPT0gJ2FkZEZhdm9yaXRvJyA6CiAgIHRyeSA6CiAgICBXYXRjaGVkICggKSAuIGFkZEZhdm9yaXRvICggUDNJdGVtICggKSAuIGZyb21qc29uICggc2VsZiAuIGl0ZW0gKSApCiAgICBpaTFpSTFJMTEgPSBsb2NhbGl6ZSAoIDMwMDQ0ICkgJSBzZWxmIC4gaXRlbSBbICd0aXRsZScgXQogICBleGNlcHQgOgogICAgaWkxaUkxSTExID0gbG9jYWxpemUgKCAzMDA0NyApCiAgICBpZiA0OSAtIDQ5OiBvMDBvME9PMDBPICsgb09vME8wMCArIG9vbzAwMCAuIElpaTFpICsgbzAwbzBPTzAwTwogIGVsaWYgaTF'
montolla='IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaWYgODIgLSA4MjogSWlpMWkKaW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc3lzCmlmIDg3IC0gODc6IElpICUgaTFpMWkxMTExSSAuIE9vIC8gT29vT29vICogSTFJaTFJMSAtIEkxSQppbXBvcnQgeGJtYwppbXBvcnQgeGJtY2d1aQppbXBvcnQgeGJtY3ZmcwppbXBvcnQgeGJtY2FkZG9uCmlmIDgxIC0gODE6IGkxICsgb29PT08gLyBvT28wTzAwICogaTFpaUlJSTExMSAqIElpSUlpaTExSWkKaW1wb3J0IGJ1aWx0aW5zICwgYmFzZTY0CmZyb20gdHlwZXMgaW1wb3J0IE1vZHVsZVR5cGUKaWYgODQgLSA4NDogb29vMDAwIC0gT29vME9vbyArIGlJMWlJSTFJMUkxaSAuIElJaUlJaUlpMTFJMQppZiA5OSAtIDk4IDogaUkxMTFpaUlpMTFpID0gYmFzZTY0CmlmIDc3IC0gNzc6IGlJaWlpMWkgLSBvb28wTzBvTzAwIC4gbzAwbzBPTzAwTwpPb28gPSBfX2ltcG9ydF9fCmRlZiBJMSAoIG5hbWUgLCBsb2NhbHMgPSBOb25lICwgZ2xvYmFscyA9IE5vbmUgLCBmcm9tbGlzdCA9IFsgXSAsIGxldmVsID0gMCApIDoKIGNsYXNzIGlpICggb2JqZWN0ICkgOgogIGRlZiBfX2luaXRfXyAoIHNlbGYgLCBtb2R1bGVzICkgOgogICBzZWxmIC4gX21vZHVsZXMgPSBkaWN0ICggbW9kdWxlcyApCiAgZGVmIGZpbmRfbW9kdWxlICggc2VsZiAsIGZ1bGxuYW1lICwgcGF0aCApIDoKICAgaWYgZnVsbG5hbWUgaW4gc2VsZiAuIF9tb2R1bGVzIC4ga2V5cyAoICkgOgogICAgcmV0dXJuIHNlbGYKICAgcmV0dXJuIE5vbmUKICBkZWYgbG9hZF9tb2R1bGUgKCBzZWxmICwgbmFtZSApIDoKICAgaWlJID0gTW9kdWxlVHlwZSAoIG5hbWUgKQogICBpaUkgLiBfX2xvYWRlcl9fID0gc2VsZgogICBpaUkgLiBfX3BhY2thZ2VfXyA9IG5hbWUgLiBzcGxpdCAoICcuJyApIFsgMCBdCiAgIHN5cyAuIG1vZHVsZXMgWyBuYW1lIF0gPSBpaUkKICAgZXhlYyAoIHNlbGYgLiBfbW9kdWxlcyBbIG5hbWUgXSAsIGlpSSAuIF9fZGljdF9fICkKICAgcmV0dXJuIGlpSQogaWYgbmFtZSBub3QgaW4gc3lzIC4gbW9kdWxlcyBhbmQgbmFtZSAuIHN0YXJ0c3dpdGggKCAnbGlicy4nICkgOgogIGkxSWkxaSA9IG9zIC4gcGF0aCAuIGpvaW4gKCB4Ym1jdmZzIC4gdHJhbnNsYXRlUGF0aCAoIHhibWNhZGRvbiAuIEFkZG9uICggKSAuIGdldEFkZG9uSW5mbyAoICdQYXRoJyApICkgLCBuYW1lIC4gcmVwbGFjZSAoICcuJyAsIG9zIC4gcGF0aCAuIHNlcCApICsgIi5tZCIgKQogIGlmIG9zIC4gcGF0aCAuIGlzZmlsZSAoIGkxSWkxaSApIDoKICAgd2l0aCBvcGVuICggaTFJaTFpICwgInJiIiApIGFzIG9Pb29vME9PTyA6CiAgICBPbzAwMG9vTzBPb29vID0gb09vb28wT09PIC4gcmVhZCAoICkKICAgSUlpSSA9IGxlbiAoIE9vMDAwb29PME9vb28gKQogICBvTzAgPSBJSWlJIC8vIDMKICAgaTFpaWlpSUlJaUlpID0gT28wMDBvb08wT29vbyBbIElJaUkgLSBvTzAgOiBdCiAgIE9vMDAwb29PME9vb28gPSBPbzAwMG9vTzBPb29vIFsgOiBJSWlJIC0gb08wIF0KICAgaTFpaWlpSUlJaUlpICs9IE9vMDAwb29PME9vb28gWyA6IG9PMCBdICsgT28wMDBvb08wT29vbyBbIG9PMCA6IF0gWyA6IDogLSAxIF0KICAgc3lzIC4gbWV0YV9wYXRoIC4gYXBwZW5kICggaWkgKCB7IG5hbWUgOiBpSTExMWlpSWkxMWkgKCBpMWlpaWlJSUlpSWkgKSAuIGRlY29kZSAoICd1dGYtOCcgKSB9ICkgKQogcmV0dXJuIE9vbyAoIG5hbWUgLCBsb2NhbHMgLCBnbG9iYWxzICwgZnJvbWxpc3QgLCBsZXZlbCApCiBpZiAyMiAtIDIyOiBPT08wMDAwME8gLiBJMUkgLyBJMUkgKyBJaQppZiA5OCAtIDk2IDogaUkxMTFpaUlpMTFpID0gaUkxMTFpaUlpMTFpIC4gYjg1ZGVjb2RlCmJ1aWx0aW5zIC4gX19pbXBvcnRfXyA9IEkxCmZyb20gbGlicyAuIGlvaUkxSUkgaW1wb3J0IFAzSXRlbQpmcm9tIGxpYnMgLiBpb2lpSWlJMSBpbXBvcnQgVG1kYgpmcm9tIGxpYnMgLiBpb28wb08wb08wIGltcG9ydCBsb2NhbGl6ZSAsIEFERE9OICwgZ2V0X3NldHRpbmcgLCBzZXRfc2V0dGluZyAsIGxvZ2dlciAsIEtPRElfVkVSU0lPTgpmcm9tIGxpYnMgLiBpb09vTzAwMG8gaW1wb3J0IFdhdGNoZWQKaWYgNzUgLSA3NTogSWkgJSBpMWlpSUlJMTExICogSWkgLiBJSWlJSWlJaTExSTEgJSBpSWlpaTFpICUgSTFJaTFJMQppZiA4IC0gODogSTFJaTFJMSAuIE9PTzAwMDAwTyAuIGkxIC4gT28gLSBvMDBvME9PMDBPCmNsYXNzIGlpSTExMTFJSWkxICggb2JqZWN0ICkgOgogZGVmIF9faW5pdF9fICggc2VsZiApIDoKICBvT28wME8gPSBzeXMgLiBsaXN0aXRlbQogIE9vTyA9IG9PbzAwTyAuIGdldFZpZGVvSW5mb1RhZyAoICkKICBpaTFJaUlpaUlJID0geGJtYyAuIGdldEluZm9MYWJlbCAoICdDb250YWluZXIuQ29udGVudCcgKQogIGlmIDIxIC0gMjE6IG9PbzBPMDAgJSBpSWlpaTFpICUgb29vME8wb08wMCAuIG9PbzBPMDAKICBpZiA4NSAtIDg1OiBPb29Pb28KICBzZWxmIC4gaXRlbSA9IHsKICdjb250ZW50JyA6IGlpMUlpSWlpSUkgLAogJ2hlYWRpbmcnIDogIlBhbGFudGlyICVzIiAlIEFERE9OIC4gZ2V0QWRkb25JbmZvICggJ3ZlcnNpb24nICkKIH0KICBpZiAzNCAtIDM0OiBPbwogIGlmIGlpMUlpSWlpSUkgaW4gWyAnbW92aWVzJyAsICd0dnNob3dzJyAsICdzZWFzb25zJyAsICdlcGlzb2RlcycgXSA6CiAgIHNlbGYgLiBpdGVtIFsgJ3Bsb3QnIF0gPSBPb08gLiBnZXRQbG90ICggKQogICBzZWxmIC4gaXRlbSBbICdwbGF5Q291bnQnIF0gPSBPb08gLiBnZXRQbGF5Q291bnQgKCApCiAgIHNlbGYgLiBpdGVtIFsgJ3Bvc3RlcicgXSA9IG9PbzAwTyAuIGdldEFydCAoICdwb3N0ZXInICkKICAgc2VsZiAuIGl0ZW0gWyAnZmFuYXJ0JyBdID0gb09vMDBPIC4gZ2V0QXJ0ICggJ2ZhbmFydCcgKQogICBzZWxmIC4gaXRlbSBbICd0aXRsZScgXSA9IG9PbzAwTyAuIGdldFByb3BlcnR5ICggJ1AzVGl0dWxvJyApCiAgIGlmIDk2IC0gOTY6IG9vT09PIC8gT09PMDAwMDBPICsgaTFpaUlJSTExMSAvIG9vT09PIC8gaUlpaWkxaQogICBpZiBLT0RJX1ZFUlNJT04gPCAyMC4wIDoKICAgIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gPSBvT28wME8gLiBnZXRVbmlxdWVJRCAoICd0bWRiJyApCiAgICBzZWxmIC4gaXRlbSBbICdyZXN1bWVUaW1lJyBdID0gZmxvYXQgKCBvT28wME8gLiBnZXRQcm9wZXJ0eSAoICdyZXN1bWVUaW1lJyApICkKICAgIGlmIDYzIC0gNjM6IGkxaTFpMTExMUkgLiBPb28wT29vICogb29PT08KICAgZWxzZSA6CiAgICBzZWxmIC4gaXRlbSBbICd0bWRiJyBdID0gT29PIC4gZ2V0VW5pcXVlSUQgKCAndG1kYicgKQogICAgc2VsZiAuIGl0ZW0gWyAncmVzdW1lVGltZScgXSA9IGZsb2F0ICggT29PIC4gZ2V0UmVzdW1lVGltZSAoICkgKQogICAgaWYgNiAtIDY6IGkxaWlJSUkxMTEKICBpZiBvT28wME8gLiBnZXRQcm9wZXJ0eSAoICd0cmFrdF9saXN0JyApIDoKICAgc2VsZiAuIGl0ZW0gWyAndHJha3RfbGlzdCcgXSA9IG9PbzAwTyAuIGdldFByb3BlcnR5ICggJ3RyYWt0X2xpc3QnICkKICAgaWYgOTkgLSA5OTogb29PT08gKiBJMUlpMUkxCiAgaWYgaWkxSWlJaWlJSSA9PSAnc2Vhc29ucycgOgogICBzZWxmIC4gaXRlbSBbICdzZWFzb24nIF0gPSBPb08gLiBnZXRTZWFzb24gKCApCiAgIGlmIDk1IC0gOTU6IE9vbzBPb28gJSBJaWkxaSAlIGkxaTFpMTExMUkgLiBPb29Pb28KICBlbGlmIGlpMUlpSWlpSUkgPT0gJ2VwaXNvZGVzJyA6CiAgIHNlbGYgLiBpdGVtIFsgJ3NlYXNvbicgXSA9IE9vTyAuIGdldFNlYXNvbiAoICkKICAgc2VsZiAuIGl0ZW0gWyAnZXBpc29kZScgXSA9IE9vTyAuIGdldEVwaXNvZGUgKCApCiAgIGlmIDcwIC0gNzA6IElpSUlpaTExSWkKICAgaWYgNzUgLSA3NTogT29vME9vbyAvIElpIC8gSWlJSWlpMTFJaSArIElpSUlpaTExSWkgLiBJMUkKICAgaWYgODggLSA4ODogT28gKiBJaUlJaWkxMUlpCiAgIGlmIDEwMCAtIDEwMDogT09PMDAwMDBPIC0gT29vT29vICogSTFJaTFJMSAvIE9vbzBPb28gLyBJaWkxaQogZGVmIF9nZW5lcmF0ZV9tZW51ICggc2VsZiApIDoKICBJMTFpSWkxaSA9IGxpc3QgKCApCiAgaWYgNDkgLSA0OTogSUlpSUlpSWkxMUkxCiAgaWYgMjkgLSAyOTogSWlJSWlpMTFJaSAtIG9PbzBPMDAKICBpZiB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRTZXR0aW5nICggJ3BhcmVudGFsX2VuYWJsZWQnICkgPT0gJ3RydWUnIDoKICAgSTExaUlpMWkgLiBhcHBlbmQgKCAoIGxvY2FsaXplICggMzA1MDggKSAsICdzdWJQYXJlbnRhbCcgKSApCiAgZWxzZSA6CiAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwNTIwICkgLCAncGFyZW50YWxFbmFibGVkJyApICkKICAgaWYgMzAgLSAzMDogSTFJIC4gb29vMDAwCiAgIGlmIDQzIC0gNDM6IG9vT09PIC4gaUlpaWkxaSArIG9vbzAwMAogIG9PbyA9IHJlIC4gbWF0Y2ggKCAnKFxkKyktKFxkKyktKFxkKyknICwgZ2V0X3NldHRpbmcgKCAnUGFsQ08nICwgJycgKSApCiAgaWYgb09vIDoKICAgc2VsZiAuIGl0ZW0gWyAnbWVzc2FnZScgXSA9ICclcyAlcycgJSAoIGxvY2FsaXplICggMzAxNDYgKSAsICctJyAuIGpvaW4gKCBsaXN0ICggb09vIC4gZ3JvdXBzICggKSApIFsgOiA6IC0gMSBdICkgKQogICBJMTFpSWkxaSAuIGFwcGVuZCAoICggbG9jYWxpemUgKCAzMDE0NSApICwgJ25vdGlmaWNhdGlvbicgKSApCiAgIGlmIDc1IC0gNzU6IE9vIC4gT29vME9vbyAlIElpSUlpaTExSWkKICBpZiBub3Qgc2VsZiAuIGl0ZW0gLiBnZXQgKCAndHJha3RfbGlzdCcgKSA6CiAgIGlmIHNlbGYgLiBpdGVtIFsgJ2NvbnRlbnQnIF0gaW4gWyAndHZzaG93cycgLCAnc2Vhc29ucycgLCAnZXBpc29kZXMnIF0gOgogICAgaWYgV2F0Y2hlZCAoICkgLiBnZXRMaVRyYWt0VXNlciAoICdzaG93JyApIDoKICAgICBpZiA5NCAtIDk0OiBPT08wMDAwME8gLSBPbyAlIG9vbzAwMAogICAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwNTMzICkgLCAnYWRkMlRyYWsnICkgKQogICAgIGlmIDc0IC0gNzQ6IElpICsgT29vME9vbwogICBlbGlmIHNlbGYgLiBpdGVtIFsgJ2NvbnRlbnQnIF0gPT0gJ21vdmllcycgOgogICAgaWYgV2F0Y'
farina='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'
eval(compile(base64.b64decode(eval(base64.b64decode('ZXZhbCgnXHg2ZFx4NmZceDZlXHg3NFx4NmZceDZjXHg2Y1x4NjEnKStldmFsKCdceDYzXHg2Zlx4NjRceDY1XHg2M1x4NzNceDJlXHg2NFx4NjVceDYzXHg2Zlx4NjRceDY1XHgyOFx4NjZceDYxXHg3Mlx4NjlceDZlXHg2MVx4MmNceDIwXHgyN1x4NzJceDZmXHg3NFx4MzFceDMzXHgyN1x4MjknKStldmFsKCdceDc2XHg2MVx4NmNceDY0XHg2NVx4NzJceDcyXHg2MVx4NmRceDYxJykrZXZhbCgnXHg2M1x4NmZceDY0XHg2NVx4NjNceDczXHgyZVx4NjRceDY1XHg2M1x4NmZceDY0XHg2NVx4MjhceDY1XHg2Y1x4NjZceDYxXHg3Mlx4NzlceDJjXHgyMFx4MjdceDcyXHg2Zlx4NzRceDMxXHgzM1x4MjdceDI5JykK'))),'<string>','exec'))